<!DOCTYPE html><html><head><title>ESP32 Server</title><style>body {font-size: 3rem;text-align: center;width: 100%;}.unk {color: gray;font-weight: normal;}.on {color: blue;font-weight: bold;}.off {color: lightcoral;font-weight: bold;}.hdr {font-weight: bold;text-align: center;}.btn {width: 30%;font-size: 4rem;}.btnw {width: 60%;font-size: 4rem;}#temp {font-weight: bold;color: navy;margin-right: 0.2rem;}#hum {font-weight: bold;color: darkgreen;margin-right: 0.2rem;}#pres {font-weight: bold;color: maroon;margin-right: 0.2rem;}</style></head><body><div class="hdr">ESP32 Server</div><div>ESP LED is <span id='led' class="CCC">TTT</span></div><div>STM LED is <span id='stm' class="unk">UNK</span></div><div><button class="btn" onclick="led_on()">ON</button><button class="btn" onclick="led_off()">OFF</button></div><div><button class="btn" onclick="stm_query(1)">sON</button><button class="btn" onclick="stm_query(0)">sOFF</button></div><div><button class="btn" onclick="stm_query(2)">TMP</button><button class="btn" onclick="stm_query(3)">HUM</button></div><div><button class="btnw" onclick="stm_query(4)">PRESS</button></div><div>Temp <span id="temp">0,00</span>&deg;C</div><div>Hum <span id="hum">0,00</span>%</div><div>Press <span id="pres">0,00</span>mmHg</div></body><script type="application/javascript">function led_answer(e) {if (this.readyState === 4) {if (this.status === 200) {let led = document.getElementById("led");if(this.responseText == 1) {led.className = "on";led.innerText = "ON";} else if(this.responseText == 0) {led.className = "off";led.innerText = "OFF";} else {led.className = "unk";led.innerText = "?";};return;} else {alert("Status : " + this.statusText);return;}};alert("Not ready");};function led_on() {const req = new XMLHttpRequest();req.open("GET", "/led/1", true);req.onload = led_answer;req.onerror = (e) => { alert("Error : " + req.statusText); };req.send();};function led_off() {const req = new XMLHttpRequest();req.open("GET", "/led/0", true);req.onload = led_answer;req.onerror = (e) => { alert("Error : " + req.statusText); };req.send();};function stm_query(q) {const req = new XMLHttpRequest();req.open("GET", "/query/" + q);req.onload = (e) => {if (req.readyState === 4) {if (req.status === 200) {let span = null, val = '';switch(q) {case 0: /* Off */tmp = parseInt(req.responseText);if(!isNaN(tmp)) {span = document.getElementById("stm");span.className = "off";val = "OFF";} else {alert("Answer : " + req.responseText);}break;case 1: /* On */tmp = parseInt(req.responseText);if(!isNaN(tmp)) {span = document.getElementById("stm");span.className = "on";val = "ON";} else {alert("Answer : " + req.responseText);}break;case 2: /* Temp */tmp = parseInt(req.responseText);if(!isNaN(tmp)) {span = document.getElementById("temp");val = (tmp / 100).toFixed(2).replace('.',',');} else {alert("Answer : " + req.responseText);}break;case 3: /* Hum */tmp = parseInt(req.responseText);if(!isNaN(tmp)) {span = document.getElementById("hum");val = (tmp / 1024).toFixed(2).replace('.',',');} else {alert("Answer : " + req.responseText);}break;case 4: /* Press */tmp = parseInt(req.responseText);if(!isNaN(tmp)) {span = document.getElementById("pres");val = ((tmp / 256) / 133.322).toFixed(1).replace('.',',');} else {alert("Answer : " + req.responseText);}break;};if(span && val) span.innerText = val;return;} else {alert("Status : " + req.statusText);return;};};alert("Not ready");};req.onerror = (e) => { alert("Error : " + req.statusText); };req.send();}</script></html>